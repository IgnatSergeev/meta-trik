diff -rupN fbshot-0.3.old/Makefile fbshot-0.3/Makefile
--- fbshot-0.3.old/Makefile	2015-10-19 16:02:28.496085299 +0300
+++ fbshot-0.3/Makefile	2015-10-19 16:06:14.428090899 +0300
@@ -2,14 +2,23 @@
 ### I think it's not worth to make such a small project
 ### modular. So this is a simple gnu Makefile...
 ###
+.DELETE_ON_ERROR:
+.PHONY: install clean all
 
-all:
-	gcc fbshot.c -lpng -lz -o fbshot
-	strip fbshot
-
-install:
-	install fbshot /usr/bin/fbshot
-	install fbshot.1.man /usr/man/man1/fbshot.1
+GZIP := gzip
+GZIPFLAGS := --best --to-stdout
+
+all: fbshot fbshot.1.gz
+
+fbshot: fbshot.c
+	$(CC) -g -Wall $(CFLAGS) $(LDFLAGS) $< -lpng -lz -o $@
+
+fbshot.1.gz: fbshot.1.man
+	$(GZIP) $(GZIPFLAGS) $< > $@
+
+install: fbshot fbshot.1.gz
+	install -D -m 0755 fbshot $(DESTDIR)/usr/bin/fbshot
+	install -D -m 0644 fbshot.1.gz $(DESTDIR)/usr/share/man/man1/fbshot.1.gz
 
 clean:
-	rm fbshot
+	-$(RM) fbshot fbshot.1.gz *~ \#*\#
diff -rupN fbshot-0.3.old/fbshot.1.man.orig fbshot-0.3/fbshot.1.man.orig
--- fbshot-0.3.old/fbshot.1.man.orig	2015-10-19 16:02:28.500085300 +0300
+++ fbshot-0.3/fbshot.1.man.orig	1970-01-01 03:00:00.000000000 +0300
@@ -1,167 +0,0 @@
-.TH fbshot 1 "(C) 2000 Stephan Beyer, GPL"
-.SH NAME
-\fBfbshot\fP - takes screenshots from your framebuffer device
-.SH SYNOPSIS
-.B fbshot [options] filename
-.SH DESCRIPTION
-.B fbshot
-reads your \fB24 or 32-bit\fP framebuffer device and saves a \fBPNG\fP image
-file. You can use it for making screenshots of your framebuffer 
-application or of your text or (n)curses applications (just
-for fun). You can also use it to show somebody (who lives far away) 
-your crazy framebuffer boot logo ;-) You may also use your shots in
-presentations or anything. I think this program isn't for nothing.
-Send \fBfeedback\fP for more suggestions to use it!
-.SH OPTIONS
-.TP
-.B -h
-print usage informations
-.TP
-.B -c console
-specifies which \fBconsole\fP (or virtual terminal - like other 
-people call this feature) to grab. Sometimes this changing is 
-faster then the framebuffer is refreshed (especially when grabbing
-framebuffer apps). If so, you should \fBuse -C console\fP ... This
-waits some time before grabbing. You can't use \fB-s\fP in this case.
-.TP
-.B -d device
-specifies which framebuffer device you want to read. If 
-you do not use this option, it takes the value from the 
-\fBFRAMEBUFFER\fP environment variable. If no FRAMEBUFFER 
-environment variable is given or if its value is \fBNULL\fP, the
-DEFAULT_FB is taken. (see source code) If you got the official 
-binary \fB.deb\fP package, this value is \fB/dev/fb0\fP ... Of 
-course, if you received a \fB.rpm\fP, it is the same. And if you
-take a look into the binary \fBELF\fP file you can still change
-this standard.
-.TP
-.B -g
-saves in \fBgrayscale\fP... 
-.TP
-.B -i
-turns \fBoff\fP interlacing. If you do not want \fBADAM7 interlacing\fP, 
-you should use the \fB-i\fP option.
-.TP
-.B -s seconds
-specifies how many seconds to wait before grabbing. \fBfbshot\fP
-does not lock console switching, so you can switch it while 
-waiting and so you can use this feature if -c doesn't work 
-as normal user and can't log in as root (see BUGS).
-.SH BEEPS
-Beeps tell you progress. First beep means "Yawn, why do you wake 
-me?! Ok, ok, I start grabbing now...", second would say "Hey, cool,
-grabbing the framebuffer was fine, now I gonna write a PNG file."
-This can take some time, because the PNG file get compressed very 
-high. Third beep means "So, here you got your PNG file, and now let
-me sleep!"...
-.SH WHY 32-BIT
-Well, this is the only color depth which works correctly at my machine. I made
-a switch(bits) within the \fBWrite_PNG\fP function, so you may add bit_depths
-and color_types easily. I am not able to test such things, so I didn't want to 
-code any stuff. But you may - \fBplease\fP do it, do it, do it! And then
-send me patches. I will implement them (into the original) as soon as possible.
-Although I cannot test it, I added \fB24-bit capability\fP, because I am sure it 
-works. So please mail me if you are able to test it.
-.SH WHY PNG
-Reasons why I chose PNG for output format:
-
-PNG is small, does everything I or you need for a screenshot. PNG is web 
-standard. JPEG or GIF are web standard, too, but both JPEG and GIF are limited.
-And libjpeg isn't working at my machine :-) and I needn't choose between libgif
-or libungif or between some related full-featured graphic libs (libLUG, 
-libMagick). But please notice: in some Netscape versions Netscape has some problems
-with PNG when calling directly. It displays them \fBsmaller\fP, and with \fBblack 
-bars\fP left and right. Within a HTML page there are \fBno\fP problems I know.
-.SH BUGS
-\fB-c\fP option does not work as non-root. But I do not want to setuid root
-the binary, because this is a \fBsecurity hazard\fP. And I do not like such
-hazards! Maybe it works with your kernel. Please mail me (with kernel version),
-if so. If you are root, it should change to the console you specified two 
-times (which is \fBnot\fP a bug).
-.SH TODO
-Nice, if some coders would help me, but the following is \fBmy task\fP, no 
-other people should code that:
-.nf
-
-    * a preview function, which generates a 
-	downscaled 100x75 picture
-
-.fi
-Not even think of that!!!! Or you get onto the deadkiss list of my personal 
-mafia ;-)
-But, of course, you may do something:
-.nf
-
-    * port it to and test it on other color depths!!!
-    * make options to specify compression (I think, that's not important)
-    * remove bugs and make bugs (but only unintentionly!)
-    * send me mail (suggestions, tips, critics)...
-.fi
-.SH AUTHOR
-If you have any comments, patches, questions, critics, tips or anything 
-else (well, feedback) to \fBfbshot\fP, send it to 
-
-    \fBStephan Beyer <fbshot@s-beyer.de>\fP
-
-.SH GETTING NEW VERSIONS
-You may visit my homepage for newer versions of fbshot:
-
-    \fBhttp://www.copyleft.de/~sbeyer\fP
-    \fBftp://www.copyleft.de/pub/project/fbshot\fP
-
-if you are not able to remind this short url, you can also try
-
-    \fBhttp://www.s-beyer.de\fP
-
-for a shorter-written redirect, which adds an advertising banner 
-window if you enabled JavaScript in your browser. :-)
-You should be able to download \fBtar.gz\fPed source codes, binary 
-\fB.deb\fPs, alien-mutated \fB.rpm\fPs and \fBdiff\fPed patches. I 
-hope you decide for the source codes, because I want some people who
-code new features on that. Thanks...
-.SH THANKS TO
-Thanks to \fBGlenn Randers-Pehrson\fP <randeg@alum.rpi.edu> who helped
-me with some basic libPNG things.
-I also have to thank \fBElliot Lee\fP <sopwith@redhat.com> who sent 
-me code for converting 8bpp to 24bpp, although this didn't work at my 
-machine. I also didn't implement it into the program, but the code contains 
-it...
-Also thanks to \fBFrank Kaefer\fP <fbshot@sta.to> who I met at #linux.de 
-in IRCnet. Caused by him I noticed, that fbshot had a real heavy bug in 
-its first two versions.
-\fBliff\fP I also met at IRCnet, channel #c. He helped me with some basic 
-bit operation stuff. Also thanks to him. 
-Thanks, of course, to everyone who downloaded this program, too. If you send 
-me mail I'll call you here (if you want). 
-So thanks to 
-\fBBrad Douglas\fP <brad@neruo.com>, 
-\fBEdmund Haworth\fP <oliver.legion@bigfoot.com>, 
-\fBElliot Lee\fP <sopwith@redhat.com>, 
-\fBFrank Kaefer\fP <fbshot@sta.to> 
-\fBGlenn Randers-Pehrson\fP <randeg@alum.rpi.edu>, 
-\fB<imaginate@elektromensch.de>\fP, 
-and you? mail me if you want to be called here. 
-You may tell me Realname and e-mail and what you are thinking of this program, 
-send me patches, comments, questions - what you want...
-.SH COPYLEFT
-Copyleft (C) 2000 \fBStephan Beyer\fP <fbshot@s-beyer.de>
-.P
-This program is free software; you can redistribute it and/or modify
-it under the terms of the GNU General Public License as published by
-the Free Software Foundation; either version 2 of the License, or
-(at your option) any later version.
-.P
-This program is distributed in the hope that it will be useful,
-but WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU General Public License for more details.
-.P
-You should have received a copy of the GNU General Public License
-along with this program; if not, write to the Free Software
-Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-.SH Some last shouts...
-BURN ALL GIFS! SAVE MAN-PAGES! HELP GNU AND THE FREE SOFTWARE FOUNDATION! 
-BURN PROPRIETARIES! DONATE (NOT TO ME, TO POOR PEOPLE WHO
-REALLY NEED THAT)! SEND ME FEEDBACK! DEBIAN IS COMING! METAL! METAL! METAL! 
-DO NOT JOIN SCIENTOLOGY! MAKE FREE SOFTWARE! DON'T GIVE AIDS ANY CHANCE!!! NO 
-SOFTWARE PATENTS! NO RESTRICTIONS! MAIL ME! I think that is enough. Bye...
\ No newline at end of file
diff -rupN fbshot-0.3.old/fbshot.c fbshot-0.3/fbshot.c
--- fbshot-0.3.old/fbshot.c	2015-10-19 16:02:28.500085300 +0300
+++ fbshot-0.3/fbshot.c	2015-10-19 17:04:45.660177914 +0300
@@ -46,6 +46,7 @@
 
 #include <sys/vt.h>
 #include <png.h>
+#include <zlib.h>
 #include <linux/fb.h> 
 
 #define DEFAULT_FB      "/dev/fb0"
@@ -81,7 +82,7 @@ void FatalError(char* err){
 }
 
 void Usage(char *binary){
-  printf("Usage: %s [-ghi] [-{C|c} vt] [-d dev] [-s n] filename.png\n", binary);
+  printf("Usage: %s [-Sghi] [-z n] [-{C|c} vt] [-d dev] [-s n] filename.png\n", binary);
 }
 
 void Help(char *binary){
@@ -100,7 +101,8 @@ void Help(char *binary){
     printf("\t-h    \tprint this usage information\n");
     printf("\t-i    \tturns OFF interlacing\n");
     printf("\t-s n  \tsleep n seconds before making screenshot\n");
-
+    printf("\t-z n  \tPNG compression level: 0 (fast) .. 9 (best); default, -1\n");
+    printf("\t-S    \tswap blue and red component(TRIK display)\n");
     printf("\nSend feedback !!!\n");
 }
 
@@ -194,7 +196,7 @@ int read_fb(char *device, int vt_num, st
   j= (read(fd, pict->buffer, ((pict->xres * pict->yres) * i) )!=
   	(pict->xres * pict->yres *i ));
 #ifdef DEBUG
-  printf("to read:%i read:%i\n",(pict->xres* pict->yres * i), j);	
+  printf("to read:%i read:%i\n",(pict->xres* pict->yres * i), j);
 #endif
   if (vt_num!=-1)
     chvt(vt_old); 
@@ -227,7 +229,7 @@ void convert8to32(struct picture *pict){
 void convert1555to32(struct picture *pict){
   int i;
   int j=0;
-  __u16 t,c;
+  __u16 c;
   char *out=(char*)malloc(pict->xres*pict->yres*4);
   for (i=0; i<pict->xres*pict->yres; i++)
   {
@@ -241,34 +243,32 @@ void convert1555to32(struct picture *pic
   pict->buffer=out;
 }
 
-void convert565to24(struct picture *pict){
+void convert565to24(struct picture *pict, int swap){
   int i;
   int j=0;
-  __u16 t,c;
+  __u16 c;
   char *out=(char*)malloc(pict->xres*pict->yres*3);
   for (i=0; i<pict->xres*pict->yres; i++)
   {
     c = ( (__u16*)(pict->buffer))[i];
-    out[j++]=(char)RED565(c);
+    out[j++]=(swap)?(char)BLUE565(c):(char)RED565(c);
     out[j++]=(char)GREEN565(c);
-    out[j++]=(char)BLUE565(c);
+    out[j++]=(swap)?(char)RED565(c):(char)BLUE565(c);
   }
   free(pict->buffer);
   pict->buffer=out;
 }
 
-static int Write_PNG(struct picture * pict, char *filename, int interlace, int gray){
+static int Write_PNG(struct picture * pict, char *filename, int interlace, int gray,  int compression, int swap){
   png_bytep *row_pointers;
   png_structp png_ptr;
   png_infop info_ptr;
   png_text txt_ptr[4];
-  struct utsname *host_info;
-  char *out;
   int i;
-  int bit_depth=0, color_type;   
+  int bit_depth=0, color_type;
   FILE *OUTfd = fopen(filename, "wb");
 #ifdef DEBUG
-    i=open("pict.bin",O_CREAT|O_WRONLY|O_TRUNC);
+ int compressio    i=open("pict.bin",O_CREAT|O_WRONLY|O_TRUNC);
     fprintf(stdout, "%i\n",write(i,(void*)pict->buffer,(pict->xres)*(pict->yres)));
     perror("dupa");
     fprintf(stdout, "Writing to %s %ix%i %i\n", filename,(pict->xres),(pict->yres),(pict->xres)*(pict->yres));
@@ -283,7 +283,7 @@ static int Write_PNG(struct picture * pi
   png_ptr = png_create_write_struct(
         	PNG_LIBPNG_VER_STRING, 
         	(png_voidp)NULL, (png_error_ptr)NULL, (png_error_ptr)NULL);
-        
+
   if (!png_ptr)
     FatalError("couldn't create PNG write struct.");
 
@@ -311,8 +311,8 @@ static int Write_PNG(struct picture * pi
   png_set_text(png_ptr, info_ptr, txt_ptr, 4);
 
   png_init_io(png_ptr, OUTfd);
-    
-  png_set_compression_level(png_ptr, Z_BEST_COMPRESSION);
+
+  png_set_compression_level(png_ptr, compression);
 
   row_pointers=(png_bytep*)malloc(sizeof(png_bytep)*pict->yres);
 
@@ -325,7 +325,7 @@ static int Write_PNG(struct picture * pi
         row_pointers[i]=pict->buffer+i*4*(pict->xres);
       png_set_invert_alpha(png_ptr);
       break;
-  
+
     case 15:
       convert1555to32(pict);
       bit_depth=8;
@@ -336,7 +336,7 @@ static int Write_PNG(struct picture * pi
       break;
 
     case 16:
-      convert565to24(pict);
+      convert565to24(pict, swap);
       bit_depth=8;
       color_type=PNG_COLOR_TYPE_RGB;
       for (i=0; i<(pict->yres); i++)
@@ -387,7 +387,7 @@ static int Write_PNG(struct picture * pi
 
 
 
-static char optstring[] = "hiC:c:d:s:";
+static char optstring[] = "ShiC:c:d:s:z:";
 static struct option long_options[] = {
         {"slowcon", 1, 0, 'C'},
         {"console", 1, 0, 'c'},
@@ -395,16 +395,19 @@ static struct option long_options[] = {
         {"help", 0, 0, 'h'},
         {"noint", 0, 0, 'i'},
         {"sleep", 1, 0, 's'},
+        {"swap", 0, 0, 'S'},
+        {"compres", 1, 0, 'z'},
         {0, 0, 0, 0}
         };
                                                                 
 int main(int argc, char **argv){
-  char *buffer, *device = NULL, *outfile = argv[argc-1];
+  char *device = NULL, *outfile = argv[argc-1];
   int optc, vt_num=-1;
   struct picture pict;
   int interlace=PNG_INTERLACE_ADAM7;
   int gray=0; /* -1 on ; 0 off ; */
-
+  int png_compression = Z_DEFAULT_COMPRESSION;
+  int swap_rgb_to_bgr   = 0;
   pict.colormap=NULL;
   
   for(;;){
@@ -416,6 +419,9 @@ int main(int argc, char **argv){
     switch (optc){
     case 'C':
       waitbfg=1;
+    case 'z':
+      png_compression=atoi(optarg);
+      break;
     case 'c':
       vt_num=atoi(optarg);
       break;
@@ -427,6 +433,9 @@ int main(int argc, char **argv){
       gray=-1;
       break;
  */
+    case 'S':
+      swap_rgb_to_bgr = 1;
+      break;
     case 'h':
       Help(argv[0]);
       return 1;
@@ -457,8 +466,8 @@ int main(int argc, char **argv){
   read_fb(device, vt_num, &pict);
 
   printf("Writing %s ...",outfile);fflush(stdout);
-      
-  Write_PNG(&pict, outfile, interlace, gray );
+
+  Write_PNG(&pict, outfile, interlace, gray, png_compression, swap_rgb_to_bgr);
 
   if(pict.colormap){
     free(pict.colormap->red);
@@ -468,8 +477,8 @@ int main(int argc, char **argv){
     free(pict.colormap);
   }
   free(pict.buffer);
-    
+
   printf ("done.\n");
-    
+
   return 0;
-}        
+}
